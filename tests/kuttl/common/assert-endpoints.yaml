#
# Check for:
#
# apiEndpoints
# service port connectivity
#

# the actual addresses of the apiEndpoints are platform specific, so we can't rely on
# kuttl asserts to check them. This short script gathers the addresses and checks that
# the endpoints are defined and their addresses follow the default pattern
# This test is for the ironic endpoints
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
namespaced: true
commands:
  - script: |
      template='{{.status.apiEndpoints.ironic.public}}{{":"}}{{.status.apiEndpoints.ironic.internal}}{{"\n"}}'
      regex="http:\/\/ironic-public-openstack\.apps.*:http:\/\/ironic-admin-openstack\.apps.*:http:\/\/ironic-internal-openstack\.apps.*"
      apiEndpoints=$(oc get -n openstack ironics.ironic.openstack.org ironic -o go-template="$template")
      matches=$(echo "$apiEndpoints" | sed -e "s?$regex??")
      if [ -z "$matches" ]; then
        exit 0
      else
        exit 1
      fi
---
# the actual addresses of the apiEndpoints are platform specific, so we can't rely on
# kuttl asserts to check them. This short script gathers the addresses and checks that
# the endpoints are defined and their addresses follow the default pattern
# This test is for the ironic inspector endpoints
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
namespaced: true
commands:
  - script: |
      template='{{index .status.apiEndpoints "ironic-inspector" "public"}}{{":"}}{{index .status.apiEndpoints "ironic-inspector" "internal"}}{{"\n"}}'
      regex="http:\/\/ironic-inspector-public-openstack\.apps.*:http:\/\/ironic-inspector-admin-openstack\.apps.*:http:\/\/ironic-inspector-internal-openstack\.apps.*"
      apiEndpoints=$(oc get -n openstack ironics.ironic.openstack.org ironic -o go-template="$template")
      matches=$(echo "$apiEndpoints" | sed -e "s?$regex??")
      if [ -z "$matches" ]; then
        exit 0
      else
        exit 1
      fi
---
# Test the status code is correct for each endpoint
# This test is for ironic endpoints
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
namespaced: true
commands:
  - script: |
      set -x
      RETURN_CODE=0
      PUBLIC_URL=$(oc get -n openstack ironics.ironic.openstack.org ironic -o jsonpath='{.status.apiEndpoints.ironic.public}')
      if [ -z "$PUBLIC_URL" ]; then
          RETURN_CODE=1
          echo "Endpoint: apiEndpoints.ironic.public not ready."
          sleep 10
      else
          STATUSCODE=$(curl --silent --output /dev/stderr --head --write-out "%{http_code}" $PUBLIC_URL)
          if test $STATUSCODE -ne 200; then
              RETURN_CODE=1
              echo "${PUBLIC_URL} status code expected is 200 but was ${STATUSCODE}"
          fi
      fi
      exit $RETURN_CODE
---
# Test the status code is correct for each endpoint
# This test is for ironic inspector endpoints
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
namespaced: true
commands:
  - script: |
      set -x
      RETURN_CODE=0
      PUBLIC_URL=$(oc get -n openstack ironics.ironic.openstack.org ironic -o jsonpath='{.status.apiEndpoints.ironic-inspector.public}')
      if [ -z "$PUBLIC_URL" ]; then
          RETURN_CODE=1
          echo "Endpoint: .status.apiEndpoints.ironic-inspector.public not ready."
          sleep 10
      else
          STATUSCODE=$(curl --silent --output /dev/stderr --head --write-out "%{http_code}" $PUBLIC_URL)
          if test $STATUSCODE -ne 200; then
              RETURN_CODE=1
              echo "${PUBLIC_URL} status code expected is 200 but was ${STATUSCODE}"
          fi
      fi
      exit $RETURN_CODE
