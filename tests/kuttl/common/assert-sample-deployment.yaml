#
# Check for:
#
# Ironic
# IronicAPI
# IronicConductor
# IronicInspector
# apiEndpoints
# service port connectivity
# 

apiVersion: ironic.openstack.org/v1beta1
kind: Ironic
metadata:
  finalizers:
  - Ironic
  name: ironic
  namespace: openstack
spec:
  customServiceConfig: |
    [DEFAULT]
    debug = true
  databaseInstance: openstack
  databaseUser: ironic
  ironicAPI:
    containerImage: quay.io/tripleozedcentos9/openstack-ironic-api:current-tripleo
    databaseUser: ironic
    passwordSelectors:
      database: IronicDatabasePassword
      service: IronicPassword
    replicas: 1
    rpcTransport: json-rpc
    serviceUser: ironic
    standalone: false
  ironicConductors:
  - containerImage: quay.io/tripleozedcentos9/openstack-ironic-conductor:current-tripleo
    databaseUser: ironic
    passwordSelectors:
      database: IronicDatabasePassword
      service: IronicPassword
    pxeContainerImage: quay.io/tripleozedcentos9/openstack-ironic-pxe:current-tripleo
    replicas: 1
    rpcTransport: json-rpc
    serviceUser: ironic
    standalone: false
    storageRequest: 10G
  ironicInspector:
    containerImage: quay.io/tripleozedcentos9/openstack-ironic-inspector:current-tripleo
    customServiceConfig: '# add your customization here'
    databaseUser: ironic_inspector
    passwordSelectors:
      database: IronicInspectorDatabasePassword
      service: IronicInspectorPassword
    preserveJobs: true
    pxeContainerImage: quay.io/tripleozedcentos9/openstack-ironic-pxe:current-tripleo
    rabbitMqClusterName: rabbitmq
    replicas: 1
    rpcTransport: json-rpc
    serviceUser: ironic-inspector
    standalone: false
  passwordSelectors:
    database: IronicDatabasePassword
    service: IronicPassword
  preserveJobs: true
  rabbitMqClusterName: rabbitmq
  rpcTransport: json-rpc
  secret: osp-secret
  serviceUser: ironic
  standalone: false
status:
  apiEndpoints:
    ironic:
      admin: http://ironic-admin-openstack.apps-crc.testing
      internal: http://ironic-internal-openstack.apps-crc.testing
      public: http://ironic-public-openstack.apps-crc.testing
    ironic-inspector:
      admin: http://ironic-inspector-admin-openstack.apps-crc.testing
      internal: http://ironic-inspector-internal-openstack.apps-crc.testing
      public: http://ironic-inspector-public-openstack.apps-crc.testing
  databaseHostname: openstack
  ironicAPIReadyCount: 1
  ironicConductorReadyCount:
    null_conductor_group_null: 1
---
apiVersion: ironic.openstack.org/v1beta1
kind: IronicAPI
metadata:
  finalizers:
  - IronicAPI
  name: ironic-api
  namespace: openstack
  ownerReferences:
  - apiVersion: ironic.openstack.org/v1beta1
    blockOwnerDeletion: true
    controller: true
    kind: Ironic
    name: ironic
spec:
  containerImage: quay.io/tripleozedcentos9/openstack-ironic-api:current-tripleo
  customServiceConfig: '# add your customization here'
  databaseHostname: openstack
  databaseUser: ironic
  debug:
    bootstrap: false
    dbSync: false
    service: false
  passwordSelectors:
    database: IronicDatabasePassword
    service: IronicPassword
  replicas: 1
  resources: {}
  rpcTransport: json-rpc
  secret: osp-secret
  serviceUser: ironic
  standalone: false
status:
  apiEndpoints:
    ironic:
      admin: http://ironic-admin-openstack.apps-crc.testing
      internal: http://ironic-internal-openstack.apps-crc.testing
      public: http://ironic-public-openstack.apps-crc.testing
  readyCount: 1
---
apiVersion: ironic.openstack.org/v1beta1
kind: IronicConductor
metadata:
  finalizers:
  - IronicConductor
  name: ironic-conductor
  namespace: openstack
  ownerReferences:
  - apiVersion: ironic.openstack.org/v1beta1
    blockOwnerDeletion: true
    controller: true
    kind: Ironic
    name: ironic
spec:
  conductorGroup: ""
  containerImage: quay.io/tripleozedcentos9/openstack-ironic-conductor:current-tripleo
  customServiceConfig: '# add your customization here'
  databaseHostname: openstack
  databaseUser: ironic
  debug:
    bootstrap: false
    dbSync: false
    service: false
  passwordSelectors:
    database: IronicDatabasePassword
    service: IronicPassword
  pxeContainerImage: quay.io/tripleozedcentos9/openstack-ironic-pxe:current-tripleo
  replicas: 1
  resources: {}
  rpcTransport: json-rpc
  secret: osp-secret
  serviceUser: ironic
  standalone: false
  storageRequest: 10G
status:
  readyCount: 1
---
apiVersion: ironic.openstack.org/v1beta1
kind: IronicInspector
metadata:
  finalizers:
  - IronicInspector
  name: ironic-inspector
  namespace: openstack
  ownerReferences:
  - apiVersion: ironic.openstack.org/v1beta1
    blockOwnerDeletion: true
    controller: true
    kind: Ironic
    name: ironic
spec:
  containerImage: quay.io/tripleozedcentos9/openstack-ironic-inspector:current-tripleo
  customServiceConfig: '# add your customization here'
  databaseInstance: openstack
  databaseUser: ironic_inspector
  debug:
    bootstrap: false
    dbSync: false
    service: false
  passwordSelectors:
    database: IronicInspectorDatabasePassword
    service: IronicInspectorPassword
  preserveJobs: true
  pxeContainerImage: quay.io/tripleozedcentos9/openstack-ironic-pxe:current-tripleo
  rabbitMqClusterName: rabbitmq
  replicas: 1
  resources: {}
  rpcTransport: json-rpc
  secret: osp-secret
  serviceUser: ironic-inspector
  standalone: false
status:
  apiEndpoints:
    ironic-inspector:
      admin: http://ironic-inspector-admin-openstack.apps-crc.testing
      internal: http://ironic-inspector-internal-openstack.apps-crc.testing
      public: http://ironic-inspector-public-openstack.apps-crc.testing
  databaseHostname: openstack
  readyCount: 1
---
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
namespaced: true
commands:
  - script: |
      set -x
      RETURN_CODE=0
      PUBLIC_URL=$(oc get -n openstack ironics.ironic.openstack.org ironic -o jsonpath='{.status.apiEndpoints.ironic.public}')
      ADMIN_URL=$(oc get -n openstack ironics.ironic.openstack.org ironic -o jsonpath='{.status.apiEndpoints.ironic.admin}')
      INTERNAL_URL=$(oc get -n openstack ironics.ironic.openstack.org ironic -o jsonpath='{.status.apiEndpoints.ironic.internal}')
      STATUSCODE=$(curl --silent --output /dev/stderr --head --write-out "%{http_code}" $PUBLIC_URL)
      if test $STATUSCODE -ne 200; then
          RETURN_CODE=1
          echo "${PUBLIC_URL} status code expected is 200 but was ${STATUSCODE}"
      fi
      STATUSCODE=$(curl --silent --output /dev/stderr --head --write-out "%{http_code}" $ADMIN_URL)
      if test $STATUSCODE -ne 200; then
          RETURN_CODE=1
          echo "${ADMIN_URL} status code expected is 200 but was ${STATUSCODE}"
      fi
      STATUSCODE=$(curl --silent --output /dev/stderr --head --write-out "%{http_code}" $INTERNAL_URL)
      if test $STATUSCODE -ne 200; then
          RETURN_CODE=1
          echo "${INTERNAL_URL} status code expected is 200 but was ${STATUSCODE}"
      fi
      exit $RETURN_CODE
